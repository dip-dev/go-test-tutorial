// Code generated by MockGen. DO NOT EDIT.
// Source: ./mysql/queries/interface.go

// Package queries is a generated GoMock package.
package queries

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSelecters is a mock of Selecters interface.
type MockSelecters struct {
	ctrl     *gomock.Controller
	recorder *MockSelectersMockRecorder
}

// MockSelectersMockRecorder is the mock recorder for MockSelecters.
type MockSelectersMockRecorder struct {
	mock *MockSelecters
}

// NewMockSelecters creates a new mock instance.
func NewMockSelecters(ctrl *gomock.Controller) *MockSelecters {
	mock := &MockSelecters{ctrl: ctrl}
	mock.recorder = &MockSelectersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelecters) EXPECT() *MockSelectersMockRecorder {
	return m.recorder
}

// SelectPrefecture mocks base method.
func (m *MockSelecters) SelectPrefecture() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPrefecture")
	ret0, _ := ret[0].(string)
	return ret0
}

// SelectPrefecture indicates an expected call of SelectPrefecture.
func (mr *MockSelectersMockRecorder) SelectPrefecture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPrefecture", reflect.TypeOf((*MockSelecters)(nil).SelectPrefecture))
}

// SelectPrefectures mocks base method.
func (m *MockSelecters) SelectPrefectures() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPrefectures")
	ret0, _ := ret[0].(string)
	return ret0
}

// SelectPrefectures indicates an expected call of SelectPrefectures.
func (mr *MockSelectersMockRecorder) SelectPrefectures() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPrefectures", reflect.TypeOf((*MockSelecters)(nil).SelectPrefectures))
}
