// Code generated by MockGen. DO NOT EDIT.
// Source: ./tutorial/chapter2/communication/interface.go

// Package communication is a generated GoMock package.
package communication

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterfaceCommunication is a mock of InterfaceCommunication interface.
type MockInterfaceCommunication struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceCommunicationMockRecorder
}

// MockInterfaceCommunicationMockRecorder is the mock recorder for MockInterfaceCommunication.
type MockInterfaceCommunicationMockRecorder struct {
	mock *MockInterfaceCommunication
}

// NewMockInterfaceCommunication creates a new mock instance.
func NewMockInterfaceCommunication(ctrl *gomock.Controller) *MockInterfaceCommunication {
	mock := &MockInterfaceCommunication{ctrl: ctrl}
	mock.recorder = &MockInterfaceCommunicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterfaceCommunication) EXPECT() *MockInterfaceCommunicationMockRecorder {
	return m.recorder
}

// Greeting mocks base method.
func (m *MockInterfaceCommunication) Greeting() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Greeting")
	ret0, _ := ret[0].(string)
	return ret0
}

// Greeting indicates an expected call of Greeting.
func (mr *MockInterfaceCommunicationMockRecorder) Greeting() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greeting", reflect.TypeOf((*MockInterfaceCommunication)(nil).Greeting))
}
