// Code generated by MockGen. DO NOT EDIT.
// Source: ./tutorial/chapter4/data/interface.go

// Package data is a generated GoMock package.
package data

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	structs "github.com/dip-dev/go-test-tutorial/mysql/structs"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// SelectPrefectures mocks base method.
func (m *MockInterface) SelectPrefectures(ctx context.Context, mailAddress string) ([]structs.MPrefecture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectPrefectures", ctx, mailAddress)
	ret0, _ := ret[0].([]structs.MPrefecture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectPrefectures indicates an expected call of SelectPrefectures.
func (mr *MockInterfaceMockRecorder) SelectPrefectures(ctx, mailAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectPrefectures", reflect.TypeOf((*MockInterface)(nil).SelectPrefectures), ctx, mailAddress)
}
